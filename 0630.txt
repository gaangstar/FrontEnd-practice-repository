1. 스토리지(웹 브라우저의 저장소들)
쿠키: 사용자 (중요한 정보), Js로 접근 못하게 보안 설정  -> 백엔드 사용
 -> 개발자도구 - 어플리케이션 - 쿠키 에서 확인

로컬, 세션 스토리지: 사용자 인증정보(로그인 여부와 같이 덜 중요한 정보) -> 프론트 사용
 -> 개발자도구 - 어플리케이션 - 스토리지에서 확인

서비스 워커: 백그라운드로 동작하는 JS 코드, 알림 수신 코드, 우리 사이트에서만 쓸수있는 확장 프로그램
 -> 개발자도구 - 어플리케이션 - 서비스 워커에서 확인

2. 알림
브라우저에서 알림 허용 되어있어야 테스트 가능
알림 허용 -> 서비스워커 등록 -> 푸시 이벤트 처리 -> 알림 띄우기
푸시 이벤트 처리: 서비스워커에서 처리하고 그 안에서 알림 띄우는 코드가 작성되야함

3. 웹소캣 

-------------------------------

쿠키 : 일시적으로 필요한 작은 데이터를 저장할 때 사용
프론트만으로도 가능(보안이 약함), 백엔드 서버와 같이 사용(보안이 강함)
만료시간이 설정되어 있으면 웹 브라우저를 꺼도 유지
만료시간이 설정되어 않으면 웹 브라우저를 껐을 때 해당 쿠키 삭제
쿠키는 페이지가 아닌 주소(IP)별로 저장됨

 <script>
		// expires 설정 -> 웹브라우저를 꺼도 유지
        const setCookie = (name, value, exp) => {
            let date = new Date();
            date.setTime(date.getTime() + exp * 24 * 60 * 60 * 1000);
            document.cookie =
                name + "=" + value + ";expires=" + date.toUTCString() + ";path=/;Secure=true;";
        }

        setCookie('test01', 'data01', 7);

		// expires 설정 없음 -> 웹 브라우저를 껐을 때 해당 쿠키 삭제
        const setCookie2 = (name, value) => {
            var date = new Date();

            document.cookie =
                name + "=" + value + ";path=/";
        }
        setCookie2('test02', 'data02');


		// 쿠키 조회
		function getCookie(name) {
            var value = document.cookie.match("(^|;) ?" + name + "=([^;]*)(;|$)");
            return value ? value[2] : null;
        }
        let test01 = getCookie("test01");
        console.log(test01);
		
		
		// 로컬 스토리지 : 지속적으로 필요한 데이터를 저장할 때 사용
        //              백엔드 서버와 상관 X, 브라우저 껐다 켜도 유지
        window.localStorage.test02 = 'data02'; // 저장방식1
        window.localStorage.setItem("test03", "data03"); // 저장방식2. 키-벨류로 저장

        console.log(window.localStorage.test02);
        console.log(window.localStorage.getItem("test03"))

        // 세션 스토리지 : 일시적으로 필요한 큰 데이터를 저장할 때 사용
        //              백엔드 서버와 상관 X, 브라우저 껐다 키면 초기화, 덜 중요한 정보
        window.sessionStorage.test04 = "data04";
        window.sessionStorage.setItem("test05", "data05");

        console.log(window.sessionStorage.test04);
        console.log(window.sessionStorage.getItem("test05"))
		
		
		
		 // 다른 페이지에 가도 동작
		 // 서비스 워커 등록, 재등록할때는 unregister로 한번 지워주고 등록
        if ('serviceWorker' in navigator) { // 네비게이터에 서비스워커가 제공되는 웹브라우저라면
            navigator.serviceWorker.register('service-worker.js') // js파일을 등록해라	
                .then((registration) => {
                    console.log('Service Worker registered with scope:', registration.scope);
                })
                .catch((error) => {
                    console.error('Service Worker registration failed:', error);
                });
        }